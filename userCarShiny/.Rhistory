net.u  <- networkMeasures(u_networkList, length=7)
#Create dataset of means, std deviations and min/max for each measure
net.means   <- networkAverages(all=net.all)
net.means.e <- networkAverages(all=net.e)
net.means.u <- networkAverages(all=net.u)
#Combine datasets from each type of network
net.means$type   <- rep("all", length(net.means$measure))
net.means.e$type <- rep("eng", length(net.means.e$measure))
net.means.u$type <- rep("uneng", length(net.means.u$measure))
netTable         <- rbind(net.means,net.means.e,net.means.u)
#write.csv(netTable, file="C:/Users/eli/Desktop/ThesisFinal/Data/networkMeans.csv")
#write.csv(net.all, file="C:/Users/eli/Desktop/ThesisFinal/Data/networkAll.csv")
#==============================================================================
#FRIENDSHIP DATA: Pre-existing ties & changes in tx orientation
#==============================================================================
#Divide alters and ties into groups:
#EE= motivated, then engaged;      UE= instrumental, then engaged
#EU= motivated, then instrumental; UU= instrumental, did not engage
#create vector of egoids for each group
ee.index <- which(egos$Tx.Motivation=="treatment" & egos$engagement=="engaged")
ee.index <- unique(egos$egoid[ee.index])
ue.index <- which(egos$Tx.Motivation=="instrumental" & egos$engagement=="engaged")
ue.index <- unique(egos$egoid[ue.index])
eu.index <- which(egos$Tx.Motivation=="treatment" & egos$engagement=="instrumental")
eu.index <- unique(egos$egoid[eu.index])
uu.index <- which(egos$Tx.Motivation=="instrumental" & egos$engagement=="instrumental")
uu.index <- unique(egos$egoid[uu.index])
#create blank variable 'group'
e_alters$group <- rep("NA", length(e_alters$egoid))
e_ties$group   <- rep("NA", length(e_ties$egoid))
u_alters$group <- rep("NA", length(u_alters$egoid))
u_ties$group   <- rep("NA", length(u_ties$egoid))
#for each egoid in a given group, assign relevant group label to group variable
for(i in unique(ee.index)){e_ties$group  <- ifelse(e_ties$egoid==i, "ee",e_ties$group)
e_alters$group<- ifelse(e_alters$egoid==i, "ee",e_alters$group)}
for(i in unique(ue.index)){e_ties$group  <- ifelse(e_ties$egoid==i, "ue",e_ties$group)
e_alters$group<- ifelse(e_alters$egoid==i, "ue",e_alters$group)}
for(i in unique(eu.index)){u_ties$group  <- ifelse(u_ties$egoid==i, "eu",u_ties$group)
u_alters$group<- ifelse(u_alters$egoid==i, "eu",u_alters$group)}
for(i in unique(uu.index)){u_ties$group  <- ifelse(u_ties$egoid==i, "uu",u_ties$group)
u_alters$group<- ifelse(u_alters$egoid==i, "uu",u_alters$group)}
#Get figures for numbers of friends with pre-existing ties & different strengths
a_friendsDf   <- friendTypes(altersDf=alters, tiesDf=ties)
ee_friendsDf  <- friendTypes(altersDf=e_alters[e_alters$group=="ee",], tiesDf=e_ties[e_ties$group=="ee",])
ue_friendsDf  <- friendTypes(altersDf=e_alters[e_alters$group=="ue",], tiesDf=e_ties[e_ties$group=="ue",])
eu_friendsDf  <- friendTypes(altersDf=u_alters[u_alters$group=="eu",], tiesDf=u_ties[u_ties$group=="eu",])
uu_friendsDf  <- friendTypes(altersDf=u_alters[u_alters$group=="uu",], tiesDf=u_ties[u_ties$group=="uu",])
#Get summaries for each friendship measure
a_friendsTable <- friendsSummary(friendsDf=a_friendsDf)
ee_friendsTable <- friendsSummary(friendsDf=ee_friendsDf)
ue_friendsTable <- friendsSummary(friendsDf=ue_friendsDf)
eu_friendsTable <- friendsSummary(friendsDf=eu_friendsDf)
uu_friendsTable <- friendsSummary(friendsDf=uu_friendsDf)
#Add table labels and combine tables
a_friendsTable$set  <- rep("all", length(a_friendsTable$measure))
a_friendsDf$set     <- rep("all", length(a_friendsDf$egoid))
ee_friendsTable$set <- rep("ee", length(ee_friendsTable$measure))
ee_friendsDf$set    <- rep("ee", length(ee_friendsDf$egoid))
ue_friendsTable$set <- rep("ue", length(ue_friendsTable$measure))
ue_friendsDf$set    <- rep("ue", length(ue_friendsDf$egoid))
eu_friendsTable$set <- rep("eu", length(eu_friendsTable$measure))
eu_friendsDf$set    <- rep("eu", length(eu_friendsDf$egoid))
uu_friendsTable$set <- rep("uu", length(uu_friendsTable$measure))
uu_friendsDf$set    <- rep("uu", length(uu_friendsDf$egoid))
friendsData  <- rbind(ee_friendsDf,ue_friendsDf,eu_friendsDf,uu_friendsDf)
friendsTable <- rbind(a_friendsTable,ee_friendsTable,ue_friendsTable,eu_friendsTable,uu_friendsTable)
rm(uu.index,eu.index,ee.index,ue.index)
#rm(ee_friendsDf,ue_friendsDf,eu_friendsDf,uu_friendsDf)
#rm(a_friendsTable,ee_friendsTable,ue_friendsTable,eu_friendsTable,uu_friendsTable)
#==============================================================================
#BOXPLOTS OF FRIENDSHIP DATA
#==============================================================================
require(ggplot2)
require(scales)
require(gridExtra)
require(reshape2)
#Prepare and melt data
df          <- melt(friendsData)
index       <- which(df$variable=="nfriendsE" | df$variable=="nfriendsU" )
df          <- df[index,]
df$variable <- as.factor(as.character(df$variable))
df$value    <- as.numeric(as.character(df$value))
#Create theme for ggplot box geom
solid.theme <- theme(panel.grid.minor=element_line(colour="grey", size=0.1),
panel.grid.major=element_line(colour="black", size=0.1))
color.theme <- scale_fill_manual(values=c("#FFFFFF","#838B83"))
ggtheme     <- theme(
legend.key.height=unit(0.8,"cm"),
legend.key.width=unit(3,"cm"),
legend.position="bottom",
legend.justification="bottom",
legend.direction="horizontal",
legend.background=element_rect(colour="black",size=0.5),
legend.text=element_text(size=15, family="serif", colour="black"),
legend.title=element_blank(),
panel.background=element_rect(fill="white"),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
#text=element_text(size=18, family="serif", colour="black"),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_text(size=15, family="serif", colour="black"),
axis.text.x=element_text(size=15, family="serif", colour="black")
)
#Plot data using boxplot geom
friends.box <- ggplot(df, aes(factor(set), value))
friends.box + geom_boxplot(aes(fill = factor(variable), outlier.size = -10)) +color.theme +ggtheme
install.packages('UsingR')
load('UsingR')
library('UsingR')
data(galton)
library(reshape)
install.packages('reshape')
library(reshape)
long <-melt(galton)
long
g<-ggplot(long,aes(x=value,fill=varibale))
g<-g+geom_histogram(colour="black",binwidth=1)
g<-g+facet_grid(. ~variable)
g
g<-ggplot(long,aes(x=value,fill=variable))
g<-g+geom_histogram(colour="black",binwidth=1)
g<-g+facet_grid(. ~variable)
g
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*x
mean(x*x)
w.*x
w*x
mean(w*x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
data(mtcars)
lm(mpg~weight)
lm(mpg~weight)
lm(mtcars$mpg~mtcars$weight)
lm(mtcars$mpg~mtcars$wt)
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/(sd(x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x<-x-mean(x)
y<-y-mean(y)
lm(y~x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
(x-0.3)^2
w*(x-0.3)^2
sum(w*(x-0.3)^2)
sum(w*(x-0.1471)^2)
sum(w*(x-1.077)^2)
sum(w*(x-0.0025)^2)
mean(w*(x)^2)
mean(x^2)
mean(w*x^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
y*x/(x*x)
mean(y*x)/mean((x*x))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
(x-0.0025)^2
w*(x-0.0025)^2
sum(w*(x-0.0025)^2)
sum(w*(x-0.30)^2)
sum(w*(x-0.1471)^2)
lm(mtcars$mpg ~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/(sd(x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(mtcars$mpg ~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/(sd(x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
shinyapps::setAccountInfo(name='charlescopley',
token='E2EF5FDF45FF192B0322C3CBE65F5402',
secret='lE3sJpjDomuUblnt6ZAaWU5Xv2NkHiqOb2qz/mg0')
shiny::runApp('Seafile/charles-1/work/2015/carPrices/usedCarPrices/shinyio')
library(gbm)
mileageBreaks <- c(0,10000,20000,50000,100000,120000,140000,160000,180000,
200000,300000,500000,1000000,2000000)
priceBreaks <- c(seq(from=0,by=20000, to=100000),seq(from=125000,by=25000, to=300000),
seq(from=350000,by=50000, to=600000),seq(from=700000,by=100000, to=3500000))
PricesOfInterest <- predict(fitBoost, as.data.frame(purchaseVehicle),n.trees=50)
load('predict.RData')
load('purchase.RData')
load('fitBoost.RData')
load('data.RData')
setwd("~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/shinyio")
load('predict.RData')
load('purchase.RData')
load('fitBoost.RData')
load('data.RData')
source('../functions.R')
mileageBreaks <- c(0,10000,20000,50000,100000,120000,140000,160000,180000,
200000,300000,500000,1000000,2000000)
priceBreaks <- c(seq(from=0,by=20000, to=100000),seq(from=125000,by=25000, to=300000),
seq(from=350000,by=50000, to=600000),seq(from=700000,by=100000, to=3500000))
purchaseVehicle<-featureCreation(purchaseVehicle,mileageBreaks,priceBreaks)
labelsMake <- levels(data$Make)
labelsModel <- levels(data$Model)
labelsEngine <- levels(data$Engine)
labelsMileageFeat <- levels(data$MileageFeat)
purchaseVehicle$Make<- factor(purchaseVehicle$Make, levels=labelsMake)
purchaseVehicle$Model<- factor(purchaseVehicle$Model, levels=labelsModel)
purchaseVehicle$Engine<- factor(purchaseVehicle$Engine, levels=labelsEngine)
purchaseVehicle$MileageFeat<- factor(as.character(purchaseVehicle$MileageFeat), levels=labelsMileageFeat)
PricesOfInterest <- predict(fitBoost, as.data.frame(purchaseVehicle),n.trees=50)
x<-rbind(floor(PricesOfInterest),ceiling(PricesOfInterest))
y<-rbind(priceBreaks[x[1,]],priceBreaks[x[2,]])
tt<-1:length(priceBreaks)
b<-approx(x=tt, y=priceBreaks, PricesOfInterest, method = "linear")
b
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::setAccountInfo(name='charlescopley',
token='E2EF5FDF45FF192B0322C3CBE65F5402',
secret='lE3sJpjDomuUblnt6ZAaWU5Xv2NkHiqOb2qz/mg0')
library(shinyapps)
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/shinyio/')
shinyapps::setAccountInfo(name='charlescopley',
token='1A77231ADE9AAA7C0D3E33B67BF64871',
secret='SJq4m6cvgp8A+Zs3GrkZNDoLa8TPF5G3qhI4Xczy')
library(shinyapps)
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/shinyio/')
deployApp()
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/shinyio/')
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/shinyio/')
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/shinyio/')
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/shinyio/')
shiny::runApp()
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/shinyio/')
load('purchase.RData')
purchaseVehicle
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/userCarShiny/')
shinyapps::setAccountInfo(name='charlescopley',
token='1A77231ADE9AAA7C0D3E33B67BF64871',
secret='SJq4m6cvgp8A+Zs3GrkZNDoLa8TPF5G3qhI4Xczy')
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/userCarShiny/')
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/userCarShiny/')
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/userCarShiny/')
shiny::runApp()
purchaseVehicle
purchaseVehicle
depreciation<-purchaseVehicle
depreciation<-purchaseVehicle
depreciation<-purchaseVehicle
depreciation
depreciation<-rbind(depreciation,purchaseVehicle)
depreciation
depreciation<-purchaseVehicle
for(i in 2:5){
depreciation<-rbind(depreciation,purchaseVehicle)
depreciation$Year[i]<-depreciation$Year[i-1]-1
}
depreciation
as.character(depreciation)
depreciation<-purchaseVehicle
as.character(depreciation)
as.character(depreciation$Year)
as.numeric(as.character(depreciation$Year))
depreciation<-purchaseVehicle
for(i in 2:5){
depreciation<-rbind(depreciation,purchaseVehicle)
depreciation$Year[i]<-as.numeric(as.character(depreciation$Year[i-1]))-1
}
depreciation
purchaseVehicle<-featureCreation(purchaseVehicle,mileageBreaks,priceBreaks)
labelsMake <- levels(data$Make)
labelsModel <- levels(data$Model)
labelsEngine <- levels(data$Engine)
labelsMileageFeat <- levels(data$MileageFeat)
purchaseVehicle$Make<- factor(purchaseVehicle$Make, levels=labelsMake)
purchaseVehicle$Model<- factor(purchaseVehicle$Model, levels=labelsModel)
purchaseVehicle$Engine<- factor(purchaseVehicle$Engine, levels=labelsEngine)
purchaseVehicle$MileageFeat<- factor(as.character(purchaseVehicle$MileageFeat), levels=labelsMileageFeat)
PricesOfInterest <- predict(fitBoost, as.data.frame(purchaseVehicle),n.trees=50)
PricesOfInterest
depreciation<-purchaseVehicle
for(i in 2:5){
depreciation<-rbind(depreciation,purchaseVehicle)
depreciation$Year[i]<-as.numeric(as.character(depreciation$Year[i-1]))-1
}
depreciation<-featureCreation(depreciation,mileageBreaks,priceBreaks)
labelsMake <- levels(data$Make)
labelsModel <- levels(data$Model)
labelsEngine <- levels(data$Engine)
labelsMileageFeat <- levels(data$MileageFeat)
purchaseVehicle$Make<- factor(depreciation$Make, levels=labelsMake)
purchaseVehicle$Model<- factor(depreciation$Model, levels=labelsModel)
purchaseVehicle$Engine<- factor(depreciation$Engine, levels=labelsEngine)
purchaseVehicle$MileageFeat<- factor(as.character(depreciation$MileageFeat), levels=labelsMileageFeat)
PricesOfInterest <- predict(fitBoost, as.data.frame(depreciation),n.trees=50)
depreciation<-purchaseVehicle
for(i in 2:5){
depreciation<-rbind(depreciation,purchaseVehicle)
depreciation$Year[i]<-as.numeric(as.character(depreciation$Year[i-1]))-1
}
depreciation<-featureCreation(depreciation,mileageBreaks,priceBreaks)
labelsMake <- levels(data$Make)
labelsModel <- levels(data$Model)
labelsEngine <- levels(data$Engine)
labelsMileageFeat <- levels(data$MileageFeat)
depreciation$Make<- factor(depreciation$Make, levels=labelsMake)
depreciation$Model<- factor(depreciation$Model, levels=labelsModel)
depreciation$Engine<- factor(depreciation$Engine, levels=labelsEngine)
depreciation$MileageFeat<- factor(as.character(depreciation$MileageFeat), levels=labelsMileageFeat)
PricesOfInterest <- predict(fitBoost, as.data.frame(depreciation),n.trees=50)
PricesOfInterest
b<-approx(x=tt, y=priceBreaks, PricesOfInterest, method = "linear")
b
plot(as.numeric(as.character(depreciation$Year)),b)
b
plot(as.numeric(as.character(depreciation$Year)),b$y)
data<-cbind(depreciation$Year,b)
data<-cbind(depreciation$Year,b)
sizeof(depreciation$Year)
dim(depreciation$Year)
data<-rbind(depreciation$Year,b)
data<-data.frame(depreciation$Year,b)
data
data<-data.frame(depreciation$Year,b$y)
data
ggplot(data, aes(x=depreciation.Year, y=b.y/1000)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse( lim=c(2016,2001))+ ylab('Price')
library('ggplot')
library('ggplot2')
ggplot(data, aes(x=depreciation.Year, y=b.y/1000)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse( lim=c(2016,2001))+ ylab('Price')
data<-data.frame(as.numeric(as.character(depreciation$Year)),b$y)
ggplot(data, aes(x=depreciation.Year, y=b.y/1000)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse( lim=c(2016,2001))+ ylab('Price')
data
Year<-as.numeric(as.character(depreciation$Year))
Price<-b$y
data<-data.frame(Year,Price)
ggplot(data, aes(x=depreciation.Year, y=b.y/1000)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse( lim=c(2016,2001))+ ylab('Price')
Year<-as.numeric(as.character(depreciation$Year))
Price<-b$y
data<-data.frame(Year,Price)
ggplot(data, aes(x=Year, y=Price/1000)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse( lim=c(2016,2001))+ ylab('Price')
Year<-as.numeric(as.character(depreciation$Year))
Price<-b$y
data<-data.frame(Year,Price)
ggplot(data, aes(x=Year, y=Price)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse( lim=c(2016,2001))+ ylab('Price')
min(Year)
data<-data.frame(Year,Price)
ggplot(data, aes(x=Year, y=Price)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse( lim=c(max(Year),min(Year))+ ylab('Price')
)
data<-data.frame(Year,Price)
ggplot(data, aes(x=Year, y=Price)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse( lim=c(max(Year),min(Year))+ ylab('Price')
)
ggplot(data, aes(x=Year, y=Price)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse()+ ylab('Price')
shiny::runApp()
library('ggplot2')
depreciation<-featureCreation(depreciation,mileageBreaks,priceBreaks)
labelsMake <- levels(data$Make)
labelsModel <- levels(data$Model)
labelsEngine <- levels(data$Engine)
labelsMileageFeat <- levels(data$MileageFeat)
depreciation$Make<- factor(depreciation$Make, levels=labelsMake)
depreciation$Model<- factor(depreciation$Model, levels=labelsModel)
depreciation$Engine<- factor(depreciation$Engine, levels=labelsEngine)
depreciation$MileageFeat<- factor(as.character(depreciation$MileageFeat), levels=labelsMileageFeat)
PricesOfInterest <- predict(fitBoost, as.data.frame(depreciation),n.trees=50)
b<-approx(x=tt, y=priceBreaks, PricesOfInterest, method = "linear")
output$depreciation <- renderPlot({
Year<-as.numeric(as.character(depreciation$Year))
Price<-b$y
data<-data.frame(Year,Price)
ggplot(data, aes(x=Year, y=Price)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse()+ ylab('Price')
})
Year<-as.numeric(as.character(depreciation$Year))
Price<-b$y
data<-data.frame(Year,Price)
ggplot(data, aes(x=Year, y=Price)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse()+ ylab('Price')
depreciation<-purchaseVehicle
for(i in 2:5){
depreciation<-rbind(depreciation,purchaseVehicle)
depreciation$Year[i]<-as.numeric(as.character(depreciation$Year[i-1]))-1
}
depreciation<-featureCreation(depreciation,mileageBreaks,priceBreaks)
labelsMake <- levels(data$Make)
labelsModel <- levels(data$Model)
labelsEngine <- levels(data$Engine)
labelsMileageFeat <- levels(data$MileageFeat)
depreciation$Make<- factor(depreciation$Make, levels=labelsMake)
depreciation$Model<- factor(depreciation$Model, levels=labelsModel)
depreciation$Engine<- factor(depreciation$Engine, levels=labelsEngine)
depreciation$MileageFeat<- factor(as.character(depreciation$MileageFeat), levels=labelsMileageFeat)
PricesOfInterest <- predict(fitBoost, as.data.frame(depreciation),n.trees=50)
b<-approx(x=tt, y=priceBreaks, PricesOfInterest, method = "linear")
Year<-as.numeric(as.character(depreciation$Year))
Price<-b$y
data<-data.frame(Year,Price)
ggplot(data, aes(x=Year, y=Price)) +
geom_point(alpha=0) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Price of Car vs Year\n[Scraped from AutoTrader.co.za.]") + scale_x_reverse()+ ylab('Price')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(1,1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/userCarShiny/')
shiny::runApp()
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/userCarShiny/')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(splines)
shiny::runApp()
library(MASS)
c + stat_smooth(method = "lm", formula = y ~ ns(x,3)) +
geom_point()
c <- ggplot(mtcars, aes(qsec, wt))
c + stat_smooth()
c + stat_smooth(method = "lm", formula = y ~ ns(x,3)) +
geom_point()
y
c
shiny::runApp()
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/userCarShiny/')
shiny::runApp()
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/userCarShiny/')
shiny::runApp()
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/userCarShiny/')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('~/Seafile/charles-1/work/2015/carPrices/usedCarPrices/userCarShiny/')
